(require racket/trace)

(define (insert value lst)
    (cond 
        ((null? lst)(list value))        
        ((<= value (car lst)) (cons value lst))    
        (else (cons (car lst)(insert value (cdr lst))))
    )
) 

(define (evenlist numberlist)
  (cond ((null? numberlist) '())
        ((not (pair? numberlist))
            (if (even? numberlist) (list numberlist) '() )
        )
        (else (append (evenlist (car numberlist)) (evenlist (cdr numberlist)) ) )
    )
)

(define (my_last lst)
    (cond
        ((null? lst) list '())
        ((null? (cdr lst)) (car lst))
        ((not(null? (cdr lst))) (my_last(cdr lst)))
    )
)

(define (last_but_one lst)
    (cond
        ((null? lst) list '())
        ((null? (cdr lst)) '())
        ((null? (cddr lst)) (car lst))
        ((list? (cdr lst)) (last_but_one(cdr lst)))
    )
)

(define (k_element lst pos)
    (cond
        ((null? lst) #f)
        ((= pos 1) (car lst))
        ((not(= pos 1)) (k_element (cdr lst) (- pos 1) ))
    )
)

(define (del_element lst pos)
    (cond
        ((null? lst) '())
        ((= pos 1) (cdr lst))
        (else (cons (car lst) (del_element (cdr lst) (- pos 1))))
    )
)

(define (nelements lst)
    (if (null? lst) 0 (+ 1 (nelements (cdr lst))))
)

(define (posPares lst)
    (cond 
        ((null? lst) '())
        ((null? (cdr lst)) '())
        ((list? lst) (cons (cadr lst) (posPares (cddr lst)) ) )
    )
)

(define (aplana lst)
    (cond
        ((null? lst) '())
        ((list? (car lst)) (append (aplana (car lst)) (aplana (cdr lst)) ) )
        ((not(list? (car lst))) (cons (car lst) (aplana (cdr lst))) )
    )
)

(define (contenida lst1 lst2)
    (cond
        ((and (null? lst1) (null? lst2)) #t)
        ((null? lst1) #t)
        ((null? lst2) #f)
        ((contenidaux lst1 lst2 ) #t)
        (else (contenida lst1 (cdr lst2)) )
    )    
)

(define (contenidaux lst1 lst2)
    (cond
        ((null? lst1) #t)
        ((null? lst2) #f)
        ((equal? (car lst1) (car lst2)) (contenidaux (cdr lst1) (cdr lst2) ))
        (else #f)
    ) 
)

(define (trenza A B) 
    (cond
        ((null? A) B)
        ((null? B) A)
        (else(cons (car A) (trenza B (cdr A))))
    )
)

(define (larga lst)
    (cond 
        ((null? lst) '())
        ((not(eqv? (car lst) (cadr lst))) (list (car lst)))
        ((eqv? (car lst) (cadr lst)) (cons (car lst) (larga (cdr lst))) )
    )
)

(define (removeN lst n)
    (cond
        ((null? lst) '())
        ((<= n 0) lst)
        ((<= (nelements lst) n) '())
        (else (cons (car lst) (removeN (cdr lst) n))  )
    )    
)

(define (rango min max)
    (cond
        ((>= min max) '())
        ((< min max) (cons min (rango (+ min 1) max)))
    )
)

(define (nodup lst)
    (cond
        ((null? lst) '())
        ((null? (cdr lst)) (cons (car lst) '()))
        ((eqv? (car lst) (cadr lst)) (nodup (cdr lst)))
        ((not(eqv? (car lst) (cadr lst))) (cons (car lst) (nodup (cdr lst))) )
    )    
)

(define (duplicate lst)
    (cond
        ((null? lst) '())
        (else (cons (car lst) (cons (car lst) (duplicate (cdr lst))) ))
    )
)

(define (diferencia lstA lstB)
    (cond
        ((null? lstA) '())
        ((null? lstB) lstA)
        ((isContained (car lstA) lstB) (diferencia (cdr lstA) lstB) )
        (else (cons (car lstA) (diferencia (cdr lstA) lstB)))
    )
)

(define (isContained n lstB)
    (cond
        ((null? n) #t)
        ((null? lstB) #f)
        ((eqv? n (car lstB)) #t)
        (else (isContained n (cdr lstB)))
    )
)

(define (remove_nth lst n)
    (cond
        ((null? lst) '())  
        ((= n 1) '())
        ;((= n 0) lst)
        (else (remove_nth (nthaux lst n) (+ n 1)))
    )
)

(define (nthaux lst n)
    (cond
        ((null? lst) '())
        ((= n 1) (cdr lst))
        ((> n (nelements lst)) lst)
        (else (cons (car lst) (nthaux (cdr lst) (- n 1))))
    )
)

(define (replace lst A B)
    (cond
        ((null? lst) '()) 
        ((null? A) lst)
        ((eqv? (car lst) A) (cons B (replace (cdr lst) A B)))
        (else(cons (car lst) (replace (cdr lst) A B )))
    )
)

(define (ndelete lst n)
    (let recur ((i 1) (rest lst))
        (cond 
            ((null? rest) '())
            ((= i n) (recur 1 (cdr rest)))
            (else (cons (car rest) (recur (+ i 1) (cdr rest))))
        )
    )
)

(define (intersection lst1 lst2)
    (cond
        ((or (null? lst1) (null? lst2)) '())
        ((intersectionAux (car lst1) lst2) (cons (car lst1) (intersection (cdr lst1) lst2) ))
        (else (intersection (cdr lst1) lst2 ))
    )
)

(define (intersectionAux n lst)
    (cond
        ((null? lst) #f)
        ((eqv? n (car lst)) #t)
        (else (intersectionAux n (cdr lst)))
    )
)

(define (union lst1 lst2)
    (cond
        ((null? lst2) lst1)
        ((unionAux (car lst2) lst1) (union lst1 (cdr lst2)))
        (else (union (cons (car lst2) lst1) (cdr lst2)) )
        ;(else (union (append lst1 (list (car lst2))) (cdr lst2)) )
    )    
)

(define (unionAux n lst)
    (cond
        ((null? lst) #f)
        ((eqv? n (car lst)) #t)
        (else (unionAux n (cdr lst)))
    )
)

(define (final lst)
    (primero (reverse lst))
)

(define (reverse lst)
    (cond
        ((null? lst) '())
        (else (append (reverse (cdr lst)) (list (car lst))))
    )    
)

(define (primero lst)
    (cond
        ((null? lst) '())
        ((null? (cdr lst)) (list (car lst)))
        ((eqv? (car lst) (cadr lst)) (append (list (car lst)) (primero (cdr lst))) )
        (else (list (car lst)))
    )    
)



; (display "trenza")
; (newline)
; (display (trenza '(a b c) '(a h d)) )
; (newline)
; (display "diferencia")
; (newline)
; (display (diferencia '(a b c) '(a h d)) )
; (newline)
; (display (diferencia '(1) '(1)) )
; (newline)
; (display (diferencia '() '()) )
; (newline)
; (display (diferencia '(a b c) '(d e f)) )
; (newline)
; (display (diferencia '(1) '()) )
; (newline)
; (display "posPares")
; (newline)
; (display (posPares '(2) ))
; (newline)
; (display (posPares '(1) ))
; (newline)
; (display (posPares '(1 -1 3) ))
; (newline)
; (display (posPares '(3 5 2 1 2 1 6) ))
; (newline)
; (newline)
; (display "Aplana")
; (newline)
; (display (aplana '(3 -1 (2) 4) ))
; (newline)
; (display (aplana '(3 -1 ((2) 4)) ))
; (newline)
; (display (aplana '(3 -1 (3 -1 2 4) 2 4) ))
; (newline)
; (display (aplana '(3 -1 (3 -1 2 4) 2 (3 -1 ((3 (( 1 ))) 2) 2 ((())) 4) 4) ))
; (newline)
; (display "Contenida")
; (newline)
; (display (contenida '(2 4) '(1 2 3 4)) )
; (newline)
; (display (contenida '(1 2) '(1 1 1 1 1 2 2 1 1)) )
; (newline)
; (display (contenida '() '(1 2 3 4)) )
; (newline)
; (display (contenida '(1 2) '()) )
; (newline)
; (display "k_element")
; (newline)
; (display (k_element '() 1) )
; (newline)
; (display (k_element '(a) 1) )
; (newline)
; (display (k_element '(a v) 2) )
; (newline)
; (display (k_element '(a v b a s d g e) 10) )
; (newline)
; (display "My_last")
; (newline)
; (display (my_last '() ) )
; (newline)
; (display (my_last '(a) ) )
; (newline)
; (display (my_last '(a v) ) )
; (newline)
; (display (my_last '(a v b a s d g e) ) )
; (newline)
; (display "Larga")
; (newline)
; (display (larga '(a a a b a c a a a) ))
; (newline)
; (display (larga '(a b a c a a a) ))
; (newline)
; (display (larga '(a a a a a a a a a a b a c a a a) ))
; (newline)
; (display (larga '(a a b a c a a a) ))
; (newline)
; (display (larga '(a a a a A b a c a a a) ))
; (newline)
; (display "Del_element")
; (newline)
; (display (del_element '() 1) )
; (newline)
; (display (del_element '(a) 1) )
; (newline)
; (display (del_element '(a v) 2) )
; (newline)
; (display (del_element '(a v b a s d g e) 4) )
; (newline)
; (display "removeN")
; (newline)
; (display (removeN '(a) 3) )
; (newline)
; (display (removeN '(1 2 3 4 5) 3) )
; (newline)
; (display (removeN '() 3) )
; (newline)
; (display (removeN '(a b c d e f g) 0) )
; (newline)
; (display "Rango")
; (display (rango 15 3))
; (newline)
; (display (rango 1 1))
; (newline)
; (display (rango 2 15))
; (newline)
; (display (rango -15 0))
; (newline)
; (display "Nodup")
; (newline)
; (display (nodup '(a a a a a a b b b c b b d d d e f f)) )
; (newline)
; (display (nodup '(a)) )
; (newline)
; (display (nodup '()) )
; (newline)
; (display "duplicate")
; (display (duplicate '(a b c)))
; (newline)
; (display "Diferencia")
; (newline)
; (display (diferencia '(a b c) '(b c d)))
; (newline)
; (display (diferencia '(a b c d e f) '(b c d)))
; (newline)
; (display (diferencia '(a b c) '(b c d e f)))
; (newline)
; (display (diferencia '(1 2 3 4) '(5 6 7 3 8 9 10 1 2)))
; (newline)
; (display (diferencia '() '(b c d)))
; (newline)
; (display (diferencia '(a b c) '()))
; (newline)
; (display "Replace")
; (newline)
; (display (replace '(1 1 2 3 4 1 2 4 3) 1 7))
; (newline)
; (display (replace '(a a b c d a b d c) 'a 'h))
; (newline)
; (display "Intersection")
; (newline)
; (display (intersection '(a b c) '() ))
; (newline)
; (display (intersection '() '(a b c) ))
; (newline)
; (display (intersection '(a b c d e) '(a c f g) ))
; (newline)
; (display (intersection '(1 2 3 4 5) '(a c f g) ))
; (newline)
; (display (intersection '(a b c d e) '(y u b D e a c) ))
; (newline)
; (display "union")
; (newline)
; (display (union '() '(a b c d e) ))
; (newline)
; (display (union '(a g h e s) '() ))
; (newline)
; (display (union '(1 2 3 4 5) '(6 7 8 9 1 2 3) ))
; (newline)
; (display (union '(a b c d e) '(f g h i j) ))
; (newline)
; (display "Final")
; (newline)
; (display (final '(a))) ; '(a)
; (newline)
; (display (final '())) ; '()
; (newline)
; (display (final '(a b a c a a a))) ; '(a a a)
; (newline)
; (display (final '(v v v v v v v v v))) ; '(v v v v v v v v v)
; (newline)
; (display (final '(1 2 3 3 3 3 3 3 3 3 3))) ; '(3 3 3 3 3 3 3 3 3)